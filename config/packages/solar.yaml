# ENERGY MONITORING
#
# This adds sensors to track two devices in my home:
#
#       - SolarEdge Inverter
#       - Tesla Powerwall 2
#
# I also have sensors for sunrise/sunset, which I display on my Solar tab in
# the UI.

utility_meter:
  home_usage_daily:
    source: sensor.home_usage
    cycle: daily
  home_usage_monthly:
    source: sensor.home_usage
    cycle: monthly
  home_usage_yearly:
    source: sensor.home_usage
    cycle: monthly

  grid_daily:
    source: sensor.grid_net
    cycle: daily
  grid_monthly:
    source: sensor.grid_net
    cycle: monthly
  grid_yearly:
    source: sensor.grid_net
    cycle: yearly

sensor:
  # Tesla Powerwall 2 Sensors
  #
  # Tesla provides a local API, documentation for it is at
  #   https://github.com/vloschiavo/powerwall2.
  - platform: rest
    name: 'Grid Power'
    # URL: https://IP/api/meters/aggregates
    resource: !secret powerwall_aggregates
    value_template: '{{ (value_json.site.instant_power | float / 1000) | round(2) }}'
    unit_of_measurement: 'kW'
    scan_interval: 120
    verify_ssl: false

  - platform: rest
    name: 'Solar Power'
    # URL: https://IP/api/meters/aggregates
    resource: !secret powerwall_aggregates
    value_template: '{{ (value_json.solar.instant_power | float / 1000) | round(2) }}'
    unit_of_measurement: 'kW'
    scan_interval: 120
    verify_ssl: false

  - platform: rest
    name: 'Powerwall Power'
    # URL: https://IP/api/meters/aggregates
    resource: !secret powerwall_aggregates
    value_template: '{{ (value_json.battery.instant_power | float / 1000) | round(2) }}'
    unit_of_measurement: 'kW'
    scan_interval: 240
    verify_ssl: false

  - platform: rest
    name: 'Home Power'
    # URL: https://IP/api/meters/aggregates
    resource: !secret powerwall_aggregates
    value_template: '{{ (value_json.load.instant_power | float / 1000) | round(2) }}'
    unit_of_measurement: 'kW'
    scan_interval: 60
    verify_ssl: false

  - platform: rest
    name: 'Powerwall Battery'
    # URL: https://IP/api/system_status/soe
    resource: !secret powerwall_status
    value_template: '{{ (value_json.percentage | float | round(0)) }}'
    unit_of_measurement: '%'
    scan_interval: 300
    verify_ssl: false

  - platform: integration
    name: home_usage
    source: sensor.home_power
    unit: kWh
    round: 2

  - platform: integration
    name: grid_net
    source: sensor.grid_power
    round: 2
    unit: kWh

  # SolarEdge Inverter
  #   The overview url should be:
  #     https://monitoringapi.solaredge.com/site/<SITE ID>/overview.json?api_key=<API_KEY>
  #   
  #   SolarEdge only allows 300 API queries per day - so these timings fit
  #   within those bounds.
  - platform: rest
    resource: !secret solaredge_overview_url
    value_template: '{{ (value_json.overview.lifeTimeData.energy | float / 1000000) | round(2) }}'
    name: 'Lifetime Generation'
    scan_interval: 86400
    unit_of_measurement: 'MWh'
  - platform: rest
    resource: !secret solaredge_overview_url
    value_template: '{{ (value_json.overview.lastMonthData.energy | float / 1000) | round(2) }}'
    name: 'Solar Month'
    unit_of_measurement: 'kWh'
    scan_interval: 86400
  - platform: rest
    resource: !secret solaredge_overview_url
    value_template: '{{ (value_json.overview.lastDayData.energy | float / 1000) | round(2) }}'
    name: 'Solar Today'
    unit_of_measurement: 'kWh'
    scan_interval: 3600
  - platform: rest
    resource: !secret solaredge_overview_url
    value_template: '{{ (value_json.overview.currentPower.power | float / 1000) | round(2) }}'
    name: 'Solar Live'
    unit_of_measurement: 'kW'
    scan_interval: 600
  - platform: rest
    resource: !secret solaredge_inventory_url
    value_template: '{{ value_json.Inventory.inverters.0.connectedOptimizers | int }}'
    name: 'Connected Optimizers'
    scan_interval: 21600

  - platform: template
    sensors:
      sunrise:
        friendly_name: 'Sunrise'
        value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
        icon_template: mdi:weather-sunset-up
      sunset:
        friendly_name: 'Sunset'
        value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
        icon_template: mdi:weather-sunset-down
      solar_max:
        icon_template: mdi:trending-up
        friendly_name: "Solar Max Today"
        unit_of_measurement: "kW"
        value_template: "{{ states('input_number.solar_max') | float }}"
        entity_id: input_number.solar_max

binary_sensor:
  - platform: rest
    # URL: https://IP/api/system_status/grid_status
    resource: !secret powerwall_grid_status
    verify_ssl: false
    method: GET
    name: Grid Status
    scan_interval: 60
    value_template: "{{ value_json.grid_status != 'SystemIslandedActive' }}"

input_number:
  # This tracks the peak production value of the solar per day.  Resets at
  # midnight via automation.
  solar_max:
    name: Solar Max Today
    min: 0.0
    max: 8.85
    unit_of_measurement: kW

history_graph:
  solar:
    name: Solar
    entities:
      - sensor.solar_live
    hours_to_show: 24

automation:
  - alias: 'Inverter optimizers error' 
    trigger:
      platform: numeric_state
      entity_id: sensor.connected_optimizers
      below: 30
    action:
      - service: notify.notify
        data_template:
          message: "Connected optimizers to the SolarEdge inverter has fallen below 30."

  - alias: 'Power Outage' 
    trigger:
      platform: state
      entity_id: binary_sensor.grid_status
      to: 'off'
    action:
      - service: script.turn_on 
        data:
          entity_id: script.grid_out

  - alias: 'Power Restored'
    trigger:
      platform: state
      entity_id: binary_sensor.grid_status 
      to: 'on'
    action:
      service: script.turn_on 
      data_template:
        message: script.grid_restored 

  - alias: "Reset Solar Max"
    trigger: 
      platform: time
      at: '00:00:00'
    action:
      service: input_number.set_value
      data:
        entity_id: input_number.solar_max
        value: 0

  - alias: 'Set Solar Max'
    trigger:
      platform: state
      entity_id: sensor.solar_live
    condition:
      - condition: template
        value_template: >
          {% if (states('sensor.solar_live') | float) > (states('input_number.solar_max') | float) %}
            true
          {% else %}
            false
          {% endif %}
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.solar_max
        value: "{{ states('sensor.solar_live') | float }}"

script:
  grid_out:
    sequence:
      - service: persistent_notification.create
        data:
          message: "GRID IS OFFLINE"
          notification_id: grid_offline
      - service: notify.notify
        data_template:
          message: "Power outage detected! Now operating on battery/solar only. Conserve power!"

      # Turn off all lights / switches to conserve power, occupants can turn on
      # lights that need to go on
      - service: switch.turn_off
        data:
          entity_id: group.all_switches
      - service: light.turn_off
        data:
          entity_id: group.all_lights

  grid_restored:
    sequence:
      - service: persistent_notification.dismiss
        data:
          notification_id: grid_offline
      - service: notify.notify
        data_template:
          message: "Power is restored."
